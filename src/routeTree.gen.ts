/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestimoniImport } from './routes/testimoni'
import { Route as SearchImport } from './routes/search'
import { Route as OrderImport } from './routes/order'
import { Route as IndexImport } from './routes/index'
import { Route as ProductIdImport } from './routes/product/$id'

// Create/Update Routes

const TestimoniRoute = TestimoniImport.update({
  id: '/testimoni',
  path: '/testimoni',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const OrderRoute = OrderImport.update({
  id: '/order',
  path: '/order',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductIdRoute = ProductIdImport.update({
  id: '/product/$id',
  path: '/product/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/order': {
      id: '/order'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof OrderImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/testimoni': {
      id: '/testimoni'
      path: '/testimoni'
      fullPath: '/testimoni'
      preLoaderRoute: typeof TestimoniImport
      parentRoute: typeof rootRoute
    }
    '/product/$id': {
      id: '/product/$id'
      path: '/product/$id'
      fullPath: '/product/$id'
      preLoaderRoute: typeof ProductIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/order': typeof OrderRoute
  '/search': typeof SearchRoute
  '/testimoni': typeof TestimoniRoute
  '/product/$id': typeof ProductIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/order': typeof OrderRoute
  '/search': typeof SearchRoute
  '/testimoni': typeof TestimoniRoute
  '/product/$id': typeof ProductIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/order': typeof OrderRoute
  '/search': typeof SearchRoute
  '/testimoni': typeof TestimoniRoute
  '/product/$id': typeof ProductIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/order' | '/search' | '/testimoni' | '/product/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/order' | '/search' | '/testimoni' | '/product/$id'
  id: '__root__' | '/' | '/order' | '/search' | '/testimoni' | '/product/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrderRoute: typeof OrderRoute
  SearchRoute: typeof SearchRoute
  TestimoniRoute: typeof TestimoniRoute
  ProductIdRoute: typeof ProductIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrderRoute: OrderRoute,
  SearchRoute: SearchRoute,
  TestimoniRoute: TestimoniRoute,
  ProductIdRoute: ProductIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/order",
        "/search",
        "/testimoni",
        "/product/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/order": {
      "filePath": "order.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/testimoni": {
      "filePath": "testimoni.tsx"
    },
    "/product/$id": {
      "filePath": "product/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
